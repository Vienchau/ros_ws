// Generated by gencpp from file msgsrv_basics_p/WarningSwitchRequest.msg
// DO NOT EDIT!


#ifndef MSGSRV_BASICS_P_MESSAGE_WARNINGSWITCHREQUEST_H
#define MSGSRV_BASICS_P_MESSAGE_WARNINGSWITCHREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msgsrv_basics_p
{
template <class ContainerAllocator>
struct WarningSwitchRequest_
{
  typedef WarningSwitchRequest_<ContainerAllocator> Type;

  WarningSwitchRequest_()
    : req_msg(false)  {
    }
  WarningSwitchRequest_(const ContainerAllocator& _alloc)
    : req_msg(false)  {
  (void)_alloc;
    }



   typedef uint8_t _req_msg_type;
  _req_msg_type req_msg;





  typedef boost::shared_ptr< ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator> const> ConstPtr;

}; // struct WarningSwitchRequest_

typedef ::msgsrv_basics_p::WarningSwitchRequest_<std::allocator<void> > WarningSwitchRequest;

typedef boost::shared_ptr< ::msgsrv_basics_p::WarningSwitchRequest > WarningSwitchRequestPtr;
typedef boost::shared_ptr< ::msgsrv_basics_p::WarningSwitchRequest const> WarningSwitchRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator1> & lhs, const ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator2> & rhs)
{
  return lhs.req_msg == rhs.req_msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator1> & lhs, const ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgsrv_basics_p

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae5b5a3c1de1477c8379c5ab18d894d3";
  }

  static const char* value(const ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae5b5a3c1de1477cULL;
  static const uint64_t static_value2 = 0x8379c5ab18d894d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgsrv_basics_p/WarningSwitchRequest";
  }

  static const char* value(const ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool req_msg\n"
;
  }

  static const char* value(const ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.req_msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WarningSwitchRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgsrv_basics_p::WarningSwitchRequest_<ContainerAllocator>& v)
  {
    s << indent << "req_msg: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.req_msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGSRV_BASICS_P_MESSAGE_WARNINGSWITCHREQUEST_H
